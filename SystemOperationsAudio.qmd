---
title: "System Operations - Audio"
author: "UAC Media Arts"
execute: 
  eval: true
  echo: false
  warning: false
  message: false
format:
  html:
    toc: true
  pdf:
     toc: true
  titlepage-pdf:
    toc: true

always_allow_html: yes
---

```{r setup, include=FALSE}
source("commonPackages.R")
```

```{r functions}
source("commonFunctions.R")
source("commonFunctionsAudio.R")
```

```{r data}
inventoryfile <- get.inventory()
```

# Introduction
This document provides basic operating information for each of the Audio systems at UAC.

Purpose of our Sound System:

* Necessary to help the hearing impaired ( roughly 10% of the population) 
* Supports video recording
* Helps draw attention to the central item – conversely makes it easier to ignore other noise 
* Helps audience to focus and concentrate
* Reinforces the message (spoken or sung)

# Power On and Off

## Power On
 
There are three numbered swtiches located in the balcony required to turn the system on

#. is located at the far west end of the front desk. This energizes the front desk gear.
#. is located behind the mix position at the top of the rack. This energizies the rear desk audio gear.
#. is just below #2. This energizes the audio amplifiers.

Allow a 10 second pause between flipping each switch.

After the console has fully started, you would typically want to recall the default scene so all settings are in a known good state.

:::{.callout-important}
As of 2023, we have a problem with the amplifier switch and the amplifiers must be turned on and off manually. 
:::

:::{.callout-note}
Although not part of the audio system, it is often the audio engineer who turns on portions of lighting (blue button) and video system (switch #4) as well
::: 
 
## Power Off 

Power off is the opposite sequence from power on.  Provide a 30 second pause between switch 3 and 2. This gives the power amps time to cycle off before proceeding.

# Training Videos

See (@fig-training-videos) for a list of training videos. The titles are links you can follow.
 
```{r training}
#| fig-cap: "Training Videos"
#| cap-location: bottom
#| label: fig-training-videos
#| 
get.training() |>
  filter(Topic1=="Audio") |>
  filter(Topic2 %in% c(	"Console Operations", "Mixing" )) |>
  filter(Topic3 != "01 Basic DM1K"  ) |>
  mutate(Title = md(glue("[{Title}]({URL})"))) |>	
  select(Topic3, Episode, Duration , Title, Notes )  |>
  arrange(Topic3, Episode) |>	
  rename(Module = Topic3) |>
  gt(rowname_col = "Episode", groupname_col="Module") |>  
	   #summary_rows(fns = list("n") ) |>
		opt_stylize(style = 3) |>
	    opt_row_striping(  row_striping = TRUE) |>
	fmt_markdown(
  columns = "Title",
  rows = everything(),
  md_engine = c("markdown")) |>
  sub_missing( columns =  "Notes",
				rows = everything(),
				missing_text = "---") |>
	cols_align( align =   "left"  ,
				columns =  "Title")
```

There is a good collection of videos on YouTube from the [Dante Certification program](https://www.audinate.com/learning/training-certification/dante-certification-program) . You can enroll in the program which will give you access to all of the videos. The level 1 videos are listed here @fig-training-videos-dante.

```{r training-dante}
#| fig-cap: "Dante Training Videos"
#| label: fig-training-videos-dante
#| 
get.training() |>
  filter(Topic1=="Audio") |>
  filter(Topic2 %in% c(	  "Dante")) |>
  filter(Topic3 == "Level 3") |>
  mutate(Title = md(glue("[{Title}]({URL})"))) |>	
  select(Topic3, Episode, Duration , Title, Notes )  |>
  arrange(Topic3, Episode) |>	
  rename(Module = Topic3) |>
  gt(rowname_col = "Episode", groupname_col="Module") |>  
	   #summary_rows(fns = list("n") ) |>
		opt_stylize(style = 3) |>
	    opt_row_striping(  row_striping = TRUE) |>
	fmt_markdown(
  columns = "Title",
  rows = everything(),
  md_engine = c("markdown")) |>
  sub_missing( columns =  "Notes",
				rows = everything(),
				missing_text = "---") |>
	cols_align( align =   "left"  ,
				columns =  "Title")
```

# Basic Operations

## The Two Consoles

We have two audio consoles in the auditorium. The main console and a sub console to provide expanded input capacity.

Most vocal and stage instruments are wired into the main console (M7CL). Addtional inputs for wireless beltpacks, computers, and palyback machines come in via the sub console. The outputs of the sub console are routed into the corresponding busses of the main console.

The monitor mix busses on both consoles are numbered the same. 

Scene recall on the main console will cause the same numbered scene to be recalled on the sub console as well. 

## Scene Recall 

Scenes are a collection of settings that can be stored and recalled together. This is a very effective way of getting to a good known state. We have created a scene (**scene #014**) which should be used as a base for start an event. This scenes is locked so that they cannot be easily overwritten. If you would like to make a change to a base scene, please discuss with Terry.

When recalling a scene, whatever is being recalled will (almost) instantly become active or inactive. You __don't__ what to do this when live, unless you know exactly what you are doing.

__Scene 014__

To recall Scene 014, press the up/down keys until “Scene 014” flashes in the SCENE field. Then press the [RECALL] key (@fig-soa-scene-recall).

![Scene Recall](./images/soa-scene-recall.png){#fig-soa-scene-recall width=65mm}

## M7 User Defined Keys

The user defined keys allow the operator to quickly access common features. They are located on the *USER DEFINED KEYS* section of the centre controls, see figure @fig-soa-m7cl-centre-controls

```{r}
#| label: fig-user-defined-keys-table
#| fig-cap: M7CL User Defined Keys
udk <- tribble(
~Key , ~Function 
,"1","Monitor 1 to faders"  
,"2","Monitor 2 to faders"  
,"3","Monitor 3 to faders"  
,"4","Monitor 4 to faders"  
,"5","Monitor 5 to faders"  
,"6","Monitor 6 to faders"  
,"7","Fx1 to faders" 
,"8","Fx2 to faders"
,"9","Record Bus to faders"
,"10","48v - phantom power control"
,"11","Tap - effect timing"
,"12","Talkback - operator to stage communication" 
	)

gt(udk) |>
	opt_stylize(style=3) |>
	tab_header("User Defined Keys")
```

![M7CL Centre Controls](./images/soa-m7cl-centre-controls.jpg){#fig-soa-m7cl-centre-controls width=50mm}
 
# Console Inputs

Part of what is included in the scene definition is the channel layout.  See @fig-m7cl-inputs-analog, @fig-m7cl-inputs-dante and @fig-dm1k-inputs.


:::{.callout-note}
* Channels 41-48 will be reassigned sometime in 2023.
* BP06 is currently assigned to this range as well ... don't remember which channel.
:::

```{r m7-inputs-analog}
#| label: fig-m7cl-inputs-analog
#| fig-cap: M7CL Inputs (Analog)
get_inputs("M7CL", "002") |>
  filter(is.na(NetworkDevice)) |>	
  select(-NetworkDevice, -NetworkDeviceChannel) |>	
  gt() |>
  tab_header("M7CL-48 Input Map - Analog") |>
  opt_stylize(style=3) |>
	sub_missing(  missing_text = "-")  
```

```{r m7-inputs-dante}
#| label: fig-m7cl-inputs-dante
#| fig-cap: M7CL Inputs (Dante)
get_inputs("M7CL", "002") |>
  filter(!is.na(NetworkDevice)) |>	
  gt() |>
  tab_header("M7CL-48 Input Map - Dante") |>
  opt_stylize(style=3) |>
	sub_missing(  missing_text = "-") |>
	cols_label( NetworkDevice ="Net Device"
			  , NetworkDeviceChannel = "Net Channel")
```

```{r}
#| label: fig-dm1k-inputs
#| fig-cap: DM1K Inputs
get_inputs("DM1K", "002") |>
  gt() |>
  tab_header("DM1000 Input Map") |>
  opt_stylize(style=3) |>
	sub_missing(  missing_text = "-") |>
	cols_label( NetworkDevice ="Net Device"
			  , NetworkDeviceChannel = "Net Channel")
```

# Operating a Channel

:::{.callout-important}
Some of the changes you make on channel inputs can also affect what happens on the Livestrean mixer. These require communication between the two engineers.

* Microphone selection for anything non-standard, or extra

* Adjustments to preamp gain (aka headamp gain), it is normal to change early during rehearsal, but after that a change should be communicated. 

* Other changes can also make an impact but are not likely to occur in normal operation. For example: adjusting the *Direct Out* levels of certain channels, or adjusting the mix or master level of busses 11-14.

See @fig-dante-outputs for more details.
:::

The channels are laid out 32 on the left hand side and 16 on the right; all in groups of 8. The bank of 8 faders in the centre mirrors one of those groups or can be used to access other functions like the monitor masters. 

## The Buttons

Each of the channel strips has three buttons, **SEL**, **CUE**, and **ON**.

__SEL__

The **SEL** button *selects* that channel and brings it into focus on the display. The knobs to the left of the display make the adjustments to the selected channel.  

__CUE__

The **CUE** button activates that channel to be heard via the headphones. The volume on the headphones can be adjusted via the monitor level below-right to the screen as well as the the knob under the wrist rest in the centre. 

Multiple channels can be **CUE**d at the same time. 

__ON__

The **ON** button turns the channel on. 

:::{.callout-note}
Turning a channel off also affects the direct out send to the livestream mixer.
:::

## Monitors on Faders

To adjust the monitor mix you can press on of the buttons labelled "M1" thru "M6" to the lower-right of the screen. Pressing the same button will revert the faders to the main mix.

## Preamp Gain Adjustments

The preamp gain is also refered to as *Head Amplifier*, and abbreviated *HA*.

The means to adjust the preamp gain follows one of two methods: Analog (wired) inputs and Dante (wireless) inputs.

Adjusting the preamp input gain also affects the level sent to the livestream mixer.

__Analog (wired) Inputs__

To adjust the gain for a microphone, use the **SEL** button and then use the **HA** knob. 

__Dante (wireless) Inputs__

The mixer cannot control the preamp gain for the wireless receivers. Instead this needs to be adjusted directly on the receivers. Each receiver is for 4 microphones and there are a pair of up-down buttons for each which will adjust the gain.

The wireless gain settings are not stored and recalled as part of the scene so you will inherit whatever was last used. 

## Handling Feedback

Audio feedback occurs when a microphone and a speaker, creates a loop in which sound from the speaker is picked up by the microphone and then amplified and re-emitted by the speaker. This results in a high-pitched, unpleasant squealing or howling noise. Audio feedback is an unintended and undesirable phenomenon in audio systems, and it can be caused by factors like microphone placement, high microphone sensitivity, or a loudspeaker's proximity to the microphone. 

To control/eliminate feedback, several approaches can be taken. In approximate priority of application:

* Turn off any other microphones that are not needed.

* Turn down the problem microphone in the speaker which is causing the problem. This could be a monitor or the main house.

* Change the placement of the microphone and/or the monitor speakers involved.

* Eq can be applied to reduce the level of the problem frequency. (Ear training helps the engineer quickly know what frequency to target.) You typically want a high Q, which means the EQ filter applies to a narrow band of frequencies.

* In some circumstances you can add a slight delay, less than 10 ms, on the problem microphone and that can inhibit the feedback cycle.

* Using the phase invesion switch can help when desperate but can cause other weird effects, especially of multiple microphones are in use.

# Console Outputs

## Monitors

We have six monitor amplifier channels, each which can handle a load of two of our monitor wedges. 

Our standard monitor configuration is (@fig-monitors)

```{r gt.monitors}
#| label: fig-monitors
#| fig-cap: Standard Monitor Map
get_monitors() |>
	gt() |>
	tab_header("Standard Monitor Map") |>
	opt_stylize(style=3) 
```

## Effects

Busses 7, 8, 9 and 10 are used for routing a mix to the internal effects processor which then appears as inputs on the return faders. 

Bus 7
: The Post-fade mix is sent to a **plate reverb** processor which then appears on return channel 1.

Bus 8
: The Post-fade mix is sent to a **hall reverb** processor which then appears on return channel 2.

Bus 9
: The Post-fade mix is sent to a **delay** processor which then appears on return channel 3.

Bus 10
: The Post-fade mix is sent to a **chorus** processor which then appears on return channel 4.

## Dante Outputs

```{r dante_outputs}
#| label: fig-dante-outputs
#| fig-cap: Dante Ouputs
get_dante_outputs() |>
	filter(Device == 'ZAKU-0001') |>
	select(-Device) |>
	gt() |>
	tab_header("M7CL Dante Outputs") |>
	opt_stylize(style=3)
```


## Other Busses
Bus 14 is used for recording. 
The Mono bus is used for lobby.

::::{.callout-note}
TODO: Write content... Need to cover Stereo LR as distinct from Bus 14 and Mono.

Discuss that the lobby level (yellow fader) should be at zero for music, about +5 for a loud talker, and +10 for a quiet talker. 
:::
 
# Operating the Wireless Microphones

We have 18 wireless transmitters and 12 receivers. A receiver can only be paried with on transmitter at a time, which means we can have, at most 12 active transmitters.

Of the 18 transmitters, 12 are handheld microphones, and 6 are beltpack units that can be fitted with either a headset or lavalier microphone.

The six beltpack trasnmitters are all routed to the DM1K mixer, with BP06 also being routed to the M7CL as it is used by Ken for his vocal mic.

The 12 handheld transmitters are all routed to the M7CL to be used as for talking or singing.

__Battery Management__

Each trasnmitter takes two AA batteries. The battery level is visible on both the trasnmitter and the reciever displays. When using Duracell Coppertop batteries each 'segment' on the display indicates about 30 minutes of runtime, but never count on the last segment. In figure @fig-soa-battery1, channel 3 has about 1.5 hours of runtime and channel 4 has about 2 hours (5 segments minus one). 

The display on the microphone is similar, but for one channel only.

![Receiver Display](./images/soa-battery1.png){#fig-soa-battery1 width=65mm}

Old batteries are to be discarded in the collection bin to the left of the console.

__Head Amp Gain__

The preamplifier gain cannot be controlled from the console. It is set via the buttons on the front panel of the receivers. This also means that the gain setting is not recalled with a scene recall.

__Wipe Down__

Wipe the microphone with a Lysol wipe before giving them to the people.

# Appendix

## Audio Recording - Audio CD

We don't do this normally but if desired this is how.

Key Steps:

#. Place a blank CD into the recorder and close the tray. It will take a few moments to recognize the disc type.
#. Press the Auto/Manual (or is it tracking) button on the left hand side to select whether you want new tracks created automatically or not.
#. Press the record button to begin recording
#. Press the record button again to start a new track when desired.
#. Press stop when done. The display will flash a PMA message for a few moments
#. To Finalize. 
    * Press the "Finalize" button, it will think for a moment or three and the display will show a time. (usually 2:01). 
    * Push Play and it will begin finalizing. The time will count down.
    * Eject disc, remove disc
    * Close tray.
#. If for some reason the audio CD was not finalized, put it back into the recorder and pick up the instructions at step #6.

## Terminology

```{r}
# A hack - gt doesn't provide a means of line-breaking for pdf. So we create a graphic and then include the graphic.

tab <- get.glossary() |>
	filter(Topic == "Audio" | Topic == "General") |>
	select(Term, Definition, Topic) |>
	arrange(Topic, Term) |>
    gt(groupname_col = "Topic") |>
	opt_stylize(style=3) |>
	fmt_markdown(columns=Definition) |>
	tab_style(
  style = cell_text(weight = "bold", size="large"),
  locations = cells_row_groups()
)
```

```{r glossary, results='asis'}
cat(print_gt_table(tab))
```

{{< include common_trailer.qmd >}}
