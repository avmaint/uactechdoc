---
title: "System Design - Lighting"
execute: 
  eval: true
  echo: false
  warning: false
  message: false
format:
  html:
    toc: true
  pdf:
    toc: true
  titlepage-pdf:
    toc: true    
always_allow_html: yes
editor: 
  markdown: 
    wrap: sentence
---

```{r packages}
source("commonPackages.R")
```

```{r functions}
source("commonFunctions.R")
source("commonLightingKeypad.R")
source("commonDiagram.R")

circleFun <- function( x= 0, y=0 , r=1, npoints=50, start=0, end=2, fill="black"){
  tt <- seq(start*pi, end*pi, length.out=npoints)
  data.frame(
    x = x + r * cos(tt),
    y = y + r * sin(tt),
    fill = fill
  )
}

#convert feet and inches to decimal feet
fin <- function(f, i) {
  f + i/12
}
```

```{r getdata, include=FALSE}
NetworkInventory <- get.network()
assets           <- get.assets()
dmx.details      <- get.dmxdetails() 
cables           <- get.cables()
```

# Introduction

This document provides key technical documentation design for the lighting subsystems at UAC.
The intended audience of this document are the people who need to manage and maintain the system.

Purpose of the lighting system:

-   Necessary to help the hearing impaired ( roughly 10% of the population) to lip read
-   Supports video recording
-   Helps draw attention to the central item -- conversely makes it easier to ignore clutter
-   Helps audience to focus and concentrate
-   Reinforces the message (spoken or sung)
- 	Creates a immersive and beautiful environment in which to worship

There are two mechanisms to control the lighting:

-   A touch panel located on the main floor by the south east auditorium doors. Users can select one of several preset configurations.
-   For more sophisticated control, The primary lighting control console is an ETC ColorSource 40AV console. It is used for all lighting operations more sophisticated than can be accomplished via the touchpad panel.

# Control Systems

There are three different protocols used to control the lighting levels of our major auditorium lighting systems:

* DMX, [an industry standard protocol](https://en.wikipedia.org/wiki/DMX512), is the backbone. We use only one DMX universe for output
* ETC Echonet
* and KetraNet Mesh wireless

How these systems are interconnected is depicted on the diagrams below.

The handrail lighting in the balcony and the emergency lighting are independent systems.

## DMX Topology

```{r dmx_control}
dmx_control <- c( 
		  "ZLKU-C001"
		, "ZLIU-0003"  
		, "2310-0220"
		, "2310-0223" 
		, "2310-0211" 
		, "2310-0202", "2310-0204", "ZLIU-A004"
		 )
xd <- c("ZLKU-B002", "ZLLU-B054"
		, "ZLLU-B052", "bt_node")

diag <- get_diagram(dmx_control 
					, assets, cables
					, exc_dev = xd
					, rankdir ="TB"
					, label= '"Balcony Control"' )

write_file(diag, "_work/sdl-dmx_control.gv")
tf <- "_work/sdl-dmx_control.png" 

grViz(diag) |> export_svg() |> charToRaw() |> rsvg_png(tf)
#system(glue("open {tf}"))
```

```{  fig-sdl-dmx_control }
//| label: fig-sdl-dmx_control
//| fig-cap: Control Topology (cables with an 'a' prefix are unlabeled)
//| cap-location: bottom
//| file: _work/sdl-dmx_control.gv
```

```{dot fig-sdl-topology1-control }
//| label: fig-sdl-topology1-control
//| fig-cap: Control Topology 
//| cap-location: bottom
//| file: gv/sdl-topology1-control.gv
```

```{r top1}
selected.at <- dmx_control

assets |> 
	filter(AssetTag %in% selected.at) |>
    select(AssetTag, Manufacturer, Model, Desc) |>
    arrange( AssetTag ) |>
	gt() |>
	opt_stylize(style=3)
```

The console is protected from power surges via an opto-isolator/DMX splitter.

## KetraNet Topology

> TODO: fix balcony subgraph

```{dot fig-sdl-topology2-control }
//| label: fig-sdl-topology2-control
//| fig-cap: Control Topology 
//| cap-location: bottom
//| file: gv/sdl-topology2-control.gv
```

```{r top2}
selected.at <- c(
                "ZLKU-C001", "ZLKU-B002", "CDWU-0009",
                "ZLIU-0003",
                "ZLIU-A003", "ZLIU-A002", 
              "ZLIU-B001", "ZLIU-B002", "ZLIU-B003" 
              )  

assets |> 
	filter(AssetTag %in% selected.at) |>
    select(AssetTag, Manufacturer, Model, Desc ) |>
    arrange( AssetTag ) |>
	gt() |>
	opt_stylize(style=3) 
```

## ETC Echo Control Topology

There is a simple lighting control panel located next to the auditorium doors by the main office (south east).
It enables the house lights to set according to several pre-defined looks.

The keypad and the main console can conflict with each other.
When running from the console, the keypad should be in "Console Mode".

The *EchoAccess App* available for your phone  allows control of the active scene and can change the programming.

```{r echo_control}

echo_control <- c(     
		  "2310-0220"
	    ,  "2310-0501"
 		,  "bt_node"
	
		 )
xd <- c("2310-0212")  

diag <- get_diagram(  echo_control 
					, assets, cables
					, exc_dev = xd
					, rankdir ="TB"
					, label= '"Echo Control"' )

write_file(diag, "_work/sdl-echo_control.gv")
tf <- "_work/sdl-echo_control.png" 

grViz(diag) |> export_svg() |> charToRaw() |> rsvg_png(tf)
# system(glue("open {tf}"))
```

```{dot fig-sdl-dmx_control }
//| label: fig-sdl-echo_control
//| fig-cap: Echo Control Topology (generated)
//| cap-location: bottom
//| file: _work/sdl-echo_control.gv
```

__Restrictions__

* The sconce lights has a timed switch which is next to the keypad, if you want sconce control during the day you will need to manual turn them on as well.
* The lighting instruments which are hung from the balcony bars cannot be controlled from the keypad due to the point in the topology where unison and dmx are merged. 
* Any one DMX address can only belong to one Zone.
* Control of the ADJ Ultrabar 12 devices on the walls presents a challenge as they are configured as 12 address devices andt his DMX footprint is not directly supported by the *Echo* equipment.

The programming is managed via the Echo Access app which communicates via bluetooth.
There is a configuration menu item in the app.
There are three items that each contribute to the configuration.

> TODO: add commentary before each of the following lists.

> TODO: Verify Profile and may need to split bulkhead ADJ zone into a colour zone and an Intensity Zone.

> TODO: Fill in the details of the tasks which can be accomplished via each of these three sections.

Access BT Interface

:   The second page is where you assign names

Inspire 8 Button

:   Associates Button actions to presets.
    See @fig-keypad-index

> TODO: need to define behaviours for: single click, double click, press and hold.

DMX Scene Controller

:   The second page is where the ZONE definitions are managed, including the DMX assignments and the instrument footprint (RGB, IRGBS, etc).


> TODO: update charts with the latest programming

```{r getKeypadData}
keypad <-  get_keypad_buttons() 
keypad2preset <- get_keypad2preset()
preset2zone   <- get_preset2zone()
zones2dmx     <- get_zones2dmx()
```

```{r keypad}
#| label: fig-keypad-index
#| fig-cap: Keypad Index
keypad |>
  arrange(Button) |>
	gt() |>
	opt_stylize(style=3)
```



::: callout-note
:::

```{r zoneConfig}

#Zones to DMX mappings
zones2dmx |>
  arrange(Zone) |>
	gt() |>
	opt_stylize(style=3)
```

```{r configReport}
rs <- keypad |>
  merge(keypad2preset) |>
  merge(preset2zone )

rs.new <- zones2dmx |>
	inner_join(rs, by=join_by(Zone) )
```

This table defines the detailed programming for each Button, Preset and Zone, @fig-detailed-program.

```{r fig-detailed-program}
tab1 <- rs.new |>
	filter(Button <5) |>
  arrange(Button, Name, B_Description, Preset, Zone) |>
	gt(groupname_col = c("Button", "Name", "B_Description") ) |>
	tab_header("Detailed program for each Button, Preset and Zone") |>
	opt_stylize(style=3)
gtsave(tab1, "./_work/sdl-detail-program1.png")
tab2 <- rs.new |>
	filter(Button > 4) |>
  arrange(Button, Name, B_Description, Preset, Zone) |>
	gt(groupname_col = c("Button", "Name", "B_Description") ) |>
	tab_header("Detailed program for each Button, Preset and Zone") |>
	opt_stylize(style=3)
gtsave(tab2, "./_work/sdl-detail-program2.png")

```

![Detailed Programming 1](./_work/sdl-detail-program1.png){fig-detailed-program1} 

![Detailed Programming 2](./_work/sdl-detail-program2.png){fig-detailed-program2}



## DMX Address Map

```{r dmxmap}
dmxmap <- tribble(
  ~DMX.Lo, ~DMX.Hi, ~Comments,
  1, 11,        "FoH Bar - Centre",
 12, 57+5-1,    "FoH Bar - East/West",

101, 145,       "ColorSource Pars Topbar and Thrust",

151, 162,       "Ketra S38 Stage Pots",
172, 202+5-1,   "CS Pars on Floor",
219, 291+12-1,  "Wall Wash East",
303, 375+12-1,  "Wall Wash West",
458, 465+5-1,   "Balcony Bar- could be readdressed to make room.",
86, 213+6-1,    "Wash Bulkhead",

NA , NA, "Rotators - 2 channels each. ",
384, 384+8-1, "NO LONGER USED."
)

tab <- dmxmap |>
  arrange(DMX.Lo) |>
	gt() |>
	opt_stylize(style=3) |>
	tab_footnote("The rotators do have an assigned channel... TODO get the channel numbers")
gtsave(tab, filename="_work/sdl-dmxmap.png")
```

![DMX Map](_work/sdl-dmxmap.png){#fig-dmxmap width=90mm}

## Channel and DMX Details

```{r dmx_details}
tab1 <- dmx.details |> 
  select(Channel, DMX.Lo, Location, Type, 
         InsturmentCount, Mode, Usage) |>
	filter(Channel <41) |>
	gt() |>
	tab_header("Channels 1-40") |>
	opt_stylize(style=3) |>
	cols_label(InsturmentCount = "Count"
			   , DMX.Lo = "DMX")

tab2 <- dmx.details |> 
  select(Channel, DMX.Lo, Location, Type, 
         InsturmentCount, Mode, Usage) |>
	filter(Channel >40) |>
	gt() |>
	tab_header("Channels 41-80") |>
	opt_stylize(style=3) |>
	cols_label(InsturmentCount = "Count"
			   , DMX.Lo = "DMX")

gtsave(tab1, filename="_work/sdl-dmxdetails1.png")
gtsave(tab2, filename="_work/sdl-dmxdetails2.png")
```

![DMX Details](./_work/sdl-dmxdetails1.png){#fig-dmxdetails1} ![DMX Details](./_work/sdl-dmxdetails2.png){#fig-dmxdetails2}

## Balcony Railing Lights

These white only strip lights are dimmable and are manually operated.
The switch is located near the East balcony door.

# Power Distribution Systems

```{dot fig-sdl-topology3-power }
//| label: fig-sdl-topology3-power
//| fig-cap: Power Topology 
//| cap-location: bottom
//| file: gv/sdl-topology3-power.gv
```

## Circuit Destinations

Lines refer to power distribution circuits from the balcony closet to east and west lighting bars, the balcony, the stage and attic.

Only the balcony ones are current in active use.

```{r}
circuits <- tribble(
  ~Circuit.Lo, ~Circuit.Hi, ~Destination, ~Source,
   1 ,10 ,  "Balcony East Bar",  "Balcony Closet",  
   11,20 ,  "Balcony West Bar",  "Balcony Closet",
   21,32 ,	"Attic",             "Electrical Room",
   40,42 ,  "Stage Floor",       "Electrical Room"
)

tab <- circuits |> 
  select("Circuit.Lo", 	"Circuit.Hi", "Source", "Destination") |>
	gt() |>
	opt_stylize(style=3)

gtsave(tab, "_work/sdl-circuits.png")
```

![Circuit Destinations](_work/sdl-circuits.png){#fig-circuits width=75mm}

{{< include commonLightingPlots.qmd >}}

# House Lighting

The house lights consists for many major components:

## Control

The house lights (except the railing) can be controlled in two ways:

1.  Via the keypad panel
    -   Located at the front of the auditorium, office side.
    -   Allows the selection of one of eight preset scenes.
2.  Via the Colorsource 40AV console
    -   Located in the balcony on th erear desk.
    -   many sophisticated looks can be programmed into the console.

These two control systems cannot be succesfully used at the same time. When using the main console select the *Console Mode* button on the keypad.

:::{.callout-note}
TODO: need to add discussion about the sconce light and the interaction between the 3-way switch, timer and touchpad.
:::

## Programming

:::{.callout-note}
TODO: how to program the touchpad scenes.
:::

# Ketra Design - Stage

```{r parms }
products <- tribble(
  ~model, ~type, ~angle, 
  "Spot",              "S",  10 ,
  "Flood",             "F",  25,  
  "Wide Flood",       "WF",  40,
  "Very Wide Flood", "VWF",  60
  )

locations <- tribble(
  ~name, ~height,
  "Bulkhead",   19+8/12,
  "InnerNorth", 22+4/12,
  "InnerSouth", 15+11/12
)

a <- 0.7 # Alpha for graphics

lamps <- merge(products, locations)  |> mutate(rads = angle/180*pi)
```

Ketra S38 product comes in `r nrow(products)` different beam angles, see @fig-products.

```{r products}
tab <- products |>
	gt() |>
	opt_stylize(style=3)
gtsave(tab, "_work/sdl-products.png")
```

![Ketra S38 Beam Width by Product](./_work/sdl-products.png){#fig-products width=60mm}

The pots on the west side of the stage, the position of each pot has been measured (± 3 inches ).
The east side is taken as the mirror image.
This is a pretty good assumption but there is at least one notable exception; one pot is out of place and the stage is not symmetrical.

```{r trig}
# based on pots w2 and w15 - w15 on a 28" riser"
rise = 19.4 -(16.1 + 28/12)
run = 25.75 - 4.25
# use the tan rule as above, convert from radians to degrees
angle = atan(rise/run) *(180/pi)

lamps <- lamps |> 
	mutate(θ = rads/2) |>
         mutate(beamradius = 2 * tan(θ) * height / 2 )
```

```{r plan }
positions <- rbind(pots.w, pots.e, stage.refs)

l1 <- positions |> filter(type== "ref") |> 
  filter(name != "r3") |> 
  filter(name != "r6") |> 
  select(x,y)

l2 <- positions |> filter(type== "ref") |> 
  filter(name != "r2") |> 
  filter(name != "r4") |> 
  filter(name != "r5") |> 
  select(x,y)

plan <- positions |>
        filter(type != "ref") |>
       # mutate(type ="S") |>
        merge(products) |>
        select(group, name, type, x,y, z, angle) |>
        mutate(rads = angle/180*pi) |>
        mutate(θ = rads/2) |>
        mutate(beamradius = 2 * tan(θ) * z / 2 ) 

#TODO: Using these environment variables was a bad idea. Refactor as a big data frame with key of the instrument name.  

for (i in 1:nrow(plan)) {
  assign( paste0("p_", plan[i, "name"])
  		, circleFun(x=plan[i, "x"]
  		, y=plan[i, "y"]
  		, r=plan[i,"beamradius"]
  		, fill=plan[i, "type"]  ))
}

makeplot <- function(df) {
  g <- ggplot(df) + coord_equal() +
  geom_point( aes(x=x, y=y)) + 
  geom_path(data=l1, aes(x=x, y=y) ) +
  geom_path(data=l2, aes(x=x, y=y) ) +
  geom_path(data=l1, aes(x=-x, y=y) ) +
  geom_path(data=l2, aes(x=-x, y=y) )  
    
#add in beam plot
for (i in 1:nrow(df) ) {
   g <- g + geom_polygon(data=get(paste0("p_", df[i, "name"])) ,
                         aes(x,y, fill=fill),   alpha=a) +
        scale_size_identity()
   }
  
g <- g +   geom_text( aes(x=x, y=y, label=name), nudge_y = 1) 
return(g)
}
```

The basic floor plan (stage). See @fig-basic-floor

```{r fig-basic-floor }
#| label: fig-basic-floor
#| fig-cap: Basic Floor Plan
df <- plan
 g <- ggplot(df) + coord_equal() +
  # geom_path(data=l1, aes(x=x, y=y) ) +
  # geom_path(data=l2, aes(x=x, y=y) ) +
  # geom_path(data=l1, aes(x=-x, y=y) ) +
  # geom_path(data=l2, aes(x=-x, y=y) ) +
  geom_text( aes(x=x, y=y, label=name) ) +
  geom_segment(data=stage.segments, aes(x=x,y=y, xend=xend, yend=yend) )  

g 
```

The design has divided up the design into `r plan |> select(group) |> unique() |> count()` zones.
Each group would be controlled by its own DMX channel group.

```{r groups   }
#| label: fig-ketra-groups
#| fig-cap: Ketra Groups
#| cap-location: bottom
smry <- plan |> 
  group_by(group) |>
  summarise(Lamp_Count = n() )
   
smry |> 
	gt() |>
	opt_stylize(style=3)
```

## Walls

We need to keep the light off the screens so we need to use the spot width lamps next to the walls.
With nothing else added, these will create dots on the floor.

```{r  walls477}
#| label: fig-walls
#| fig-cap: Walls
p1 <- plan |> 
   filter(group == "Wall" ) 

makeplot(p1 )
```

## Down Stage (Bulkhead)

The bulkhead pots can be used to light up the typical vocal area.
An eight foot beam diameter should give decent coverage.
With all of them on, the centre section wil be brighter than the outside.

For coverage behind the bulkhead, we can use "Two Rows"

```{r fig-downstage }
#| label: fig-downstage
#| fig-cap: Down Stage
p1 <- plan |> 
   filter(group == "Down Stage" ) 

makeplot(p1 )
```

## Up Stage Centre

The WF covers most of the riser

```{r  fig-upstagecentre }
#| label: fig-upstagecentre
#| fig-cap: Upstage Centre
p1 <- plan |> 
   filter(group == "Up Stage" ) 

makeplot(p1 )
```

## Centre Wash

The there are 10 centre pots are in one groups to wash most of the platform.
There will be a hot spot down the centre if all are on at once.

```{r fig-centrewash }
#| label: fig-centrewash
#| fig-cap: Centre Wash
p1 <- plan |> 
   filter(group == "Centre"  )   

makeplot(p1)
```

# Ketra Details

```{r  }
rbind(pots.w, pots.e) |> 
  arrange(group, y, x) |>
	gt()|>
	fmt_number(decimals=2)
```

## Transition Delay

The systems supports several profiles:

* RGB - Red, Green, Blue
* RGBW - RGB plus White
* RGBIF - RGB plus Intensity and Fade Time

The maximum delay time required to execute a lighting transition follows this formula: $$
T = 2.7 \times {ceiling} (  \frac {N \times G} {45})
$$ where:

```{r}
df <- tribble (
  ~Variable, ~Description, ~Value,
   "",      "Number of groups on Stage", g1 <-4,
   "",      "Number of groups in House", g2 <-7,
   "G",     "Total number of groups",    G  <-(g1+g2),
   "N",     "Number of (DMX) Channels per Group", N <- 3,
  "T",     "Maximum delay time", T <- 2.7 * ceiling(N*G/45)
)

df |>
	gt() |>
	opt_stylize(style=3)
```

In this design there are `r G` groups all using the RGB profile.
The expected maximum transition time is `r T` seconds.

# Appendix

# The Room

## Measurements

```{r}
  tribble(
  ~Object,      ~Feet, ~Inches, 
  "SW Wall",      71,  10,  
  "South Wall",   21,  3, 
  "NW Wall",      55, 11, 
  "North Centre", 45,  2,
  "NE Back Wall",  55, 8,
  "SE Back Wall", 72, 2,
  "Front to back along centre line", 90, 2,
  "Distance (y dimension)  for corners of SW/NW wall meet",  23, 2,
  "Corner to corner distance", 123, 2
) |> 
  mutate(Distance = Feet + Inches/12) |>
  gt() |>
	tab_header("Room Measurements") |>
	fmt_number( decimals =2)
```

## Floor Plan

Reference location "r1" is the "zero" point.

```{r fig-floor-plan  }
#| label: fig-floor-plan
#| fig-cap-location: Floor Plan

key.refs <- all.refs |> filter(group != "post")
ggplot() + 
   coord_equal() +  
   geom_segment(data=wall.segments, aes(x=x,y=y, xend=xend, yend=yend) ) +
   geom_segment(data=balc.segments, aes(x=x,y=y, xend=xend, yend=yend) ) +    
   geom_curve(data=thrust, aes(x=x,y=y, xend=xend, yend=yend),  curvature=-0.3) +
   geom_point(data=key.refs, aes(x=x, y=y), color="white", size=6) +
   geom_text(data=key.refs, aes(x=x, y=y, label=name)) +
   ggtitle("Floor Plan")
```

```{r l912}
all.refs |>
  select(-group) |>
  gt() |>	
	tab_header("All Reference Points") |>
  fmt_number(decimals =2)  
```

# Network Details

The lighting system has few network components.
RJ45 and cat6 cabling is used for some interconnects - the protocol is DMX not Ethernet.

```{r net_dets, results="asis"}
NetworkInventory |> 
  filter(Category=="Lighting") |> 
  select(Location, Usage, Device, MAC, IP, URL, Notes) |>
	gt() |>
	opt_stylize(style=3) |>
	tab_header("Network Details") |>
	print_gt_table() |>
	cat()
```

# Lighting Equipment Inventory

```{r inventory, results="asis"}
 
cs = c("AssetTag","Qty"  ,
  "Manufacturer" ,
  "Model"  , 
  "Qty",
  "Location"  ,
  "Type" ,
  "Desc"     )

df <- assets |>  
     filter( Category=="Lighting" 
          		, InService== "Y") |>  
	 filter(!Type %in% c("Cable", "Bulb" , "Other")) |>
     dplyr::select(one_of(cs)) |> 
     arrange(AssetTag)

nr <- nrow(df)
n <- 25
df1 <- df |> filter(between(row_number(),           1     ,            n )) 
df2 <- df |> filter(between(row_number(),       (n+1)     , min(2*n,nr ) ))
df3 <- df |> filter(between(row_number(), min((2*n+1), nr), nr           ))
 
#nrow(df1);nrow(df2);nrow(df3)
#View(df1);View(df2);View(df3)

header1 <- glue("Lighting Inventory 1-{n} of {nr}")
header2 <- glue("Lighting Inventory {n+1}-{min(2*n ,nr)} of {nr}")
header3 <- glue("Lighting Inventory {2*n+1}-{nr} of {nr}")

tab1 <- df1 |>	gt() |>
	opt_stylize(style=3) |>
	tab_header(header1)  
tab2 <-df2 |>	gt() |>
	opt_stylize(style=3) |>
	tab_header(header2)  
tab3 <-df2 |>	gt() |>
	opt_stylize(style=3) |>
	tab_header(header3) 
```

```{r inv1,results="asis"}
tab1 |> print_gt_table() |> cat()
```

```{r inv2,results="asis"}
tab2 |> print_gt_table() |> cat()
```

```{r inv3,results="asis", eval=FALSE}
tab3 |> print_gt_table() |> cat()
```
# Appendix

# Accessories

## GOBO Rotators

Each one needs two channels.

-   n is a control channel, n+1 must be zero.

Intensity of zero is stop.
The closer to 50 the slower it rotates.
1-49 and 50-100 rotate in opposite directions.


## Terminology

```{r gt_terminology}
# A hack - gt doesn't provide a means of line-breaking for pdf. So we create a graphic and then include the graphic.

tab <- get.glossary() |>
	filter(Topic == "Lighting" | Topic == "General" | Topic == "Power") |>
	select(Term, Definition, Topic) |>
	arrange(Topic, Term) |>
    gt(groupname_col = "Topic") |>
	opt_stylize(style=3) |>
	fmt_markdown(columns=Definition) |>
	tab_style(
  style = cell_text(weight = "bold", size="large"),
  locations = cells_row_groups()
)
```

```{r glossary, results='asis'}
cat(print_gt_table(tab))
```

{{< include common_trailer.qmd >}}
